import socket
import struct
import time
import random

# Configuración del servidor UDP
UDP_IP = "127.0.0.1"  # Dirección IP del servidor
UDP_PORT = 6000       # Puerto del servidor

# Crear el socket UDP
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Definir la estructura de datos
def generate_data():
    data = {
        'clutchRPM': random.uniform(0, 10),
        'deltaTime': random.uniform(0, 10),
        'engineOilTemp': random.uniform(0, 10),
        'engineWaterTemp': random.uniform(0, 10),
        'lapStartET': random.uniform(0, 10),
        'lapDistance': random.uniform(0, 10),
        'bestS1': random.uniform(0, 10),
        'bestS2': random.uniform(0, 10),
        'bestLap': random.uniform(0, 10),
        'lastS1': random.uniform(0, 10),
        'lastS2': random.uniform(0, 10),
        'lastLap': random.uniform(0, 10),
        'currentS1': random.uniform(0, 10),
        'currentS2': random.uniform(0, 10),
        'localAccelX': random.uniform(0, 10),
        'localAccelY': random.uniform(0, 10),
        'localAccelZ': random.uniform(0, 10),
        'localRotX': random.uniform(0, 10),
        'localRotY': random.uniform(0, 10),
        'localRotZ': random.uniform(0, 10),
        'localRotAccelX': random.uniform(0, 10),
        'localRotAccelY': random.uniform(0, 10),
        'localRotAccelZ': random.uniform(0, 10),
        'localVelX': random.uniform(0, 10),
        'localVelY': random.uniform(0, 10),
        'localVelZ': random.uniform(0, 10),
        'oriXX': random.uniform(0, 10),
        'oriXY': random.uniform(0, 10),
        'oriXZ': random.uniform(0, 10),
        'oriYX': random.uniform(0, 10),
        'oriYY': random.uniform(0, 10),
        'oriYZ': random.uniform(0, 10),
        'oriZX': random.uniform(0, 10),
        'oriZY': random.uniform(0, 10),
        'oriZZ': random.uniform(0, 10),
        'posX': random.uniform(0, 10),
        'posY': random.uniform(0, 10),
        'posZ': random.uniform(0, 10),
        'steeringArmForce': random.uniform(0, 10),
        'cloudDarkness': random.uniform(0, 10),
        'rainSeverity': random.uniform(0, 10),
        'ambientTemp': random.uniform(0, 10),
        'trackTemp': random.uniform(0, 10),
        'windSpeedX': random.uniform(0, 10),
        'windSpeedY': random.uniform(0, 10),
        'windSpeedZ': random.uniform(0, 10),
        'onPathWetness': random.uniform(0, 10),
        'offPathWetness': random.uniform(0, 10),
        'speed': random.uniform(0, 10),
        'roll': random.uniform(0, 10),
        'pitch': random.uniform(0, 10),
        'rpm': random.uniform(0, 10),
        'maxRPM': random.uniform(0, 10),
        'lapIniTime': random.uniform(0, 10),
        'endingTime': random.uniform(0, 10),
        'currentTime': random.uniform(0, 10),
        'brake': random.uniform(0, 10),
        'clutch': random.uniform(0, 10),
        'steering': random.uniform(0, 10),
        'throttle': random.uniform(0, 10),
        'brakeTempFL': random.uniform(0, 10),
        'brakeTempFR': random.uniform(0, 10),
        'brakeTempRL': random.uniform(0, 10),
        'brakeTempRR': random.uniform(0, 10),
        'gripFactorFL': random.uniform(0, 10),
        'gripFactorFR': random.uniform(0, 10),
        'gripFactorRL': random.uniform(0, 10),
        'gripFactorRR': random.uniform(0, 10),
        'lateralForceFL': random.uniform(0, 10),
        'lateralForceFR': random.uniform(0, 10),
        'lateralForceRL': random.uniform(0, 10),
        'lateralForceRR': random.uniform(0, 10),
        'pressureFL': random.uniform(0, 10),
        'pressureFR': random.uniform(0, 10),
        'pressureRL': random.uniform(0, 10),
        'pressureRR': random.uniform(0, 10),
        'rideHeightFL': random.uniform(0, 10),
        'rideHeightFR': random.uniform(0, 10),
        'rideHeightRL': random.uniform(0, 10),
        'rideHeightRR': random.uniform(0, 10),
        'rotationFL': random.uniform(0, 10),
        'rotationFR': random.uniform(0, 10),
        'rotationRL': random.uniform(0, 10),
        'rotationRR': random.uniform(0, 10),
        'shockDeflectionFL': random.uniform(0, 10),
        'shockDeflectionFR': random.uniform(0, 10),
        'shockDeflectionRL': random.uniform(0, 10),
        'shockDeflectionRR': random.uniform(0, 10),
        'tireTempFLI': random.uniform(0, 10),
        'tireTempFLM': random.uniform(0, 10),
        'tireTempFLO': random.uniform(0, 10),
        'tireTempFRI': random.uniform(0, 10),
        'tireTempFRM': random.uniform(0, 10),
        'tireTempFRO': random.uniform(0, 10),
        'tireTempRLI': random.uniform(0, 10),
        'tireTempRLM': random.uniform(0, 10),
        'tireTempRLO': random.uniform(0, 10),
        'tireTempRRI': random.uniform(0, 10),
        'tireTempRRM': random.uniform(0, 10),
        'tireTempRRO': random.uniform(0, 10),
        'tireLoadFL': random.uniform(0, 10),
        'tireLoadFR': random.uniform(0, 10),
        'tireLoadRL': random.uniform(0, 10),
        'tireLoadRR': random.uniform(0, 10),
        'tireWearFL': random.uniform(0, 10),
        'tireWearFR': random.uniform(0, 10),
        'tireWearRL': random.uniform(0, 10),
        'tireWearRR': random.uniform(0, 10),
        'lastImpactET': random.uniform(0, 10),
        'lastImpactMagnitude': random.uniform(0, 10),
        'lastImpactPosX': random.uniform(0, 10),
        'lastImpactPosY': random.uniform(0, 10),
        'lastImpactPosZ': random.uniform(0, 10),
        'fuel': random.uniform(0, 10),
        'deltaTimeBehind': random.uniform(0, 10),
        'deltaTimeLeader': random.uniform(0, 10),
        'lapNumber': random.randint(0, 10),
        'gear': random.randint(0, 10),
        'deltaLapsBehind': random.randint(0, 10),
        'deltaLapsLeader': random.randint(0, 10),
        'numOfVehicles': random.randint(0, 10),
        'maxLaps': random.randint(0, 10),
        'numPitstops': random.randint(0, 10),
        'numPenalties': random.randint(0, 10),
        'detached': bool(random.getrandbits(1)),
        'detachedFL': bool(random.getrandbits(1)),
        'detachedFR': bool(random.getrandbits(1)),
        'detachedRL': bool(random.getrandbits(1)),
        'detachedRR': bool(random.getrandbits(1)),
        'overheating': bool(random.getrandbits(1)),
        'flatFL': bool(random.getrandbits(1)),
        'flatFR': bool(random.getrandbits(1)),
        'flatRL': bool(random.getrandbits(1)),
        'flatRR': bool(random.getrandbits(1)),
        'isPlayer': bool(random.getrandbits(1)),
        'isInPit': bool(random.getrandbits(1)),
        'surfaceFL': random.randint(0, 10),
        'surfaceFR': random.randint(0, 10),
        'surfaceRL': random.randint(0, 10),
        'surfaceRR': random.randint(0, 10),
        'scheduledStops': random.randint(0, 10),
        'position': random.randint(0, 10),
        'gamePhase': random.randint(0, 10),
        'startLight': random.randint(0, 10),
        'numRedLights': random.randint(0, 10),
        'whoIsInControl': random.randint(0, 10),
        'finishStatus': random.randint(0, 10),
        'yellowFlagState': random.randint(0, 10),
        'vehicleClass': random.choice(["Class A", "Class B", "Class C"]),
        'terrainNameFL': random.choice(["Asphalt", "Gravel", "Grass"]),
        'terrainNameFR': random.choice(["Asphalt", "Gravel", "Grass"]),
        'terrainNameRL': random.choice(["Asphalt", "Gravel", "Grass"]),
        'terrainNameRR': random.choice(["Asphalt", "Gravel", "Grass"]),
        'playerName': random.choice(["Player1", "Player2", "Player3"]),
        'trackName': random.choice(["Track1", "Track2", "Track3"]),
        'vehicleName': random.choice(["Vehicle1", "Vehicle2", "Vehicle3"]),
        'driverName': random.choice(["Driver1", "Driver2", "Driver3"])
    }

    packed_data = struct.pack('f' * 116 + 'l' * 32 + '128s' * 9,
                              *[data[field] if isinstance(data[field], (float, int)) else data[field].encode('utf-8') for field in data])

    return packed_data


while True:
    # Generar datos
    datos = generate_data()
    
    # Enviar datos al servidor UDP
    sock.sendto(datos, (UDP_IP, UDP_PORT))
    
    # Dormir para mantener 90 envíos por segundo (~11ms entre cada envío)
    time.sleep(1/90)